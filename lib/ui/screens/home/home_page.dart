import 'package:elf_play/business_logic/blocs/home_page_bloc/home_page_bloc.dart';
import 'package:elf_play/business_logic/cubits/bottom_bar_cubit/bottom_bar_cubit.dart';
import 'package:elf_play/config/app_hive_boxes.dart';
import 'package:elf_play/config/app_router.dart';
import 'package:elf_play/config/constants.dart';
import 'package:elf_play/config/enums.dart';
import 'package:elf_play/config/themes.dart';
import 'package:elf_play/data/models/api_response/home_page_data.dart';
import 'package:elf_play/data/models/group.dart';
import 'package:elf_play/data/models/sync/song_sync.dart';
import 'package:elf_play/ui/common/app_error.dart';
import 'package:elf_play/ui/common/app_loading.dart';
import 'package:elf_play/ui/common/app_subscribe_card.dart';
import 'package:elf_play/ui/common/no_internet_header.dart';
import 'package:elf_play/ui/screens/home/widgets/home_app_header.dart';
import 'package:elf_play/ui/screens/home/widgets/home_categories.dart';
import 'package:elf_play/ui/screens/home/widgets/home_featured_albums.dart';
import 'package:elf_play/ui/screens/home/widgets/home_featured_playlists.dart';
import 'package:elf_play/ui/screens/home/widgets/home_featured_songs.dart';
import 'package:elf_play/ui/screens/home/widgets/home_groups.dart';
import 'package:elf_play/ui/screens/home/widgets/home_header_gradient.dart';
import 'package:elf_play/ui/screens/home/widgets/home_recently_played.dart';
import 'package:elf_play/ui/screens/home/widgets/home_shortcuts.dart';
import 'package:elf_play/util/l10n_util.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class HomePage extends StatefulWidget {
  HomePage({Key? key}) : super(key: key);

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage>
    with TickerProviderStateMixin, RouteAware {
  @override
  void didChangeDependencies() {
    //SUBSCRIBE TO ROUTH OBSERVER
    AppRouterPaths.routeObserver.subscribe(this, ModalRoute.of(context)!);
    //CANCEL PAGE REQUEST
    BlocProvider.of<HomePageBloc>(context).add(CancelHomePageRequestEvent());
    super.didChangeDependencies();
  }

  @override
  void didPopNext() {
    BlocProvider.of<BottomBarCubit>(context).changeScreen(
      BottomBarPages.HOME,
    );
  }

  @override
  void initState() {
    BlocProvider.of<HomePageBloc>(context).add(LoadHomePageEvent());

    ///DEBUG
    AppHiveBoxes.instance.songSyncBox.values.forEach((element) {
      if (element is SongSync) {
        print("SYNCEDDD DATEE= > ${element.toMap()}");
      }
    });

    super.initState();
  }

  @override
  void dispose() {
    AppRouterPaths.routeObserver.unsubscribe(this);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.black,
      body: BlocBuilder<HomePageBloc, HomePageState>(
        builder: (context, state) {
          if (state is HomePageLoaded) {
            return buildHomePageLoaded(homePageData: state.homePageData);
          }
          if (state is HomePageLoading) {
            return AppLoading(size: AppValues.loadingWidgetSize);
          }
          if (state is HomePageLoadingError) {
            return AppError(
              bgWidget: AppLoading(size: AppValues.loadingWidgetSize),
              onRetry: () {
                BlocProvider.of<HomePageBloc>(context).add(
                  LoadHomePageEvent(),
                );
              },
            );
          }
          return AppLoading(size: AppValues.loadingWidgetSize);
          // return Column(
          //   crossAxisAlignment: CrossAxisAlignment.start,
          //   children: [
          //     HomeUserLibrary(),
          //     SizedBox(height: AppMargin.margin_32),
          //     HomeFeaturedSongs(),
          //     SizedBox(height: AppMargin.margin_32),
          //   ],
          // );
        },
      ),
    );
  }

  SingleChildScrollView buildHomePageLoaded(
      {required HomePageData homePageData}) {
    //GROUPS CONCATENATE
    List<Group> groups = [];
    groups.addAll(homePageData.autogeneratedGroups);
    groups.addAll(homePageData.adminGroups);

    return SingleChildScrollView(
      physics: ClampingScrollPhysics(),
      child: Stack(
        children: [
          HomeHeaderGradient(),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.max,
            children: [
              SizedBox(height: AppMargin.margin_48),

              ///NO INTERNET HEADER
              NoInternetHeader(),

              ///BUILD USER LIBRARY GRIDS
              HomeShortcuts(
                shortcutData: homePageData.shortcutData,
              ),
              SizedBox(height: AppMargin.margin_32),

              ///BUILD RECENTLY PLAYED LIST
              HomeRecentlyPlayed(recentlyPlayed: homePageData.recentlyPlayed),

              ///BUILD HOME CATEGORIES
              HomeCategories(categories: homePageData.categories),
              SizedBox(height: AppMargin.margin_32),

              ///BUILD USER LIBRARY GRIDS
              HomeFeaturedSongs(featuredSongs: homePageData.featuredSongs),
              SizedBox(height: AppMargin.margin_32),

              Container(
                padding:
                    EdgeInsets.symmetric(horizontal: AppPadding.padding_16),
                child: AppSubscribeCard(),
              ),

              ///BUILD FEATURED ALBUMS
              HomeFeaturedAlbums(
                featuredAlbums: homePageData.featuredAlbums,
              ),

              ///BUILD HOME PAGE GROUPS
              buildGroupsListView(groups),

              ///BUILD FEATURED PLAYLISTS
              HomeFeaturedPlaylists(
                featuredPlaylists: homePageData.featuredPlaylist,
              ),
            ],
          ),
          Positioned(
            top: AppMargin.margin_32,
            left: AppMargin.margin_16,
            right: AppMargin.margin_16,
            child: HomeAppBar(),
          ),
        ],
      ),
    );
  }

  ListView buildGroupsListView(List<Group> groups) {
    return ListView.separated(
      itemCount: groups.length,
      shrinkWrap: true,
      physics: NeverScrollableScrollPhysics(),
      separatorBuilder: (context, index) {
        return SizedBox(height: AppMargin.margin_32);
      },
      itemBuilder: (context, index) {
        if (groups[index].groupItems.length > 0 && groups[index].isVisible) {
          return HomeGroups(
            groupId: groups[index].groupId,
            groupTitle:
                L10nUtil.translateLocale(groups[index].groupTitleText, context),
            groupSubTitle: groups[index].groupSubTitleText != null
                ? L10nUtil.translateLocale(
                    groups[index].groupSubTitleText!, context)
                : null,
            groupHeaderImageUrl: groups[index].headerImageId != null
                ? AppApi.baseFileUrl +
                    groups[index].headerImageId!.imageSmallPath
                : null,
            groupUiType: groups[index].groupUiType,
            groupItems: groups[index].groupItems,
            groupType: groups[index].groupType,
          );
        } else {
          return SizedBox();
        }
      },
    );
  }
}
