import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:mehaley/business_logic/blocs/home_page_blocs/discover_page_bloc/home_page_bloc.dart';
import 'package:mehaley/business_logic/cubits/recently_purchased_cubit.dart';
import 'package:mehaley/config/constants.dart';
import 'package:mehaley/config/themes.dart';
import 'package:mehaley/data/models/api_response/home_page_data.dart';
import 'package:mehaley/data/models/enums/enums.dart';
import 'package:mehaley/data/models/group.dart';
import 'package:mehaley/ui/common/app_error.dart';
import 'package:mehaley/ui/common/app_loading.dart';
import 'package:mehaley/ui/common/app_subscribe_card.dart';
import 'package:mehaley/ui/common/no_internet_header.dart';
import 'package:mehaley/ui/screens/home/widgets/home_categories.dart';
import 'package:mehaley/ui/screens/home/widgets/home_featured_albums.dart';
import 'package:mehaley/ui/screens/home/widgets/home_featured_playlists.dart';
import 'package:mehaley/ui/screens/home/widgets/home_featured_songs.dart';
import 'package:mehaley/ui/screens/home/widgets/home_groups.dart';
import 'package:mehaley/ui/screens/home/widgets/home_page_carousel.dart';
import 'package:mehaley/ui/screens/home/widgets/home_recently_played.dart';
import 'package:mehaley/ui/screens/home/widgets/ite_home_page_ad.dart';
import 'package:mehaley/util/l10n_util.dart';

class DiscoverTabPage extends StatefulWidget {
  const DiscoverTabPage({Key? key}) : super(key: key);

  @override
  State<DiscoverTabPage> createState() => _DiscoverTabPageState();
}

class _DiscoverTabPageState extends State<DiscoverTabPage>
    with AutomaticKeepAliveClientMixin<DiscoverTabPage> {
  ///TO PRESERVE PAGES STATE
  @override
  bool get wantKeepAlive => true;

  @override
  void initState() {
    BlocProvider.of<HomePageBloc>(context).add(LoadHomePageEvent());
    super.initState();
  }

  @override
  Widget build(BuildContext _) {
    return Builder(builder: (context) {
      return BlocListener<RecentlyPurchasedCubit, bool?>(
        listener: (context, state) {
          if (state != null) {
            if (state) {
              BlocProvider.of<HomePageBloc>(context).add(LoadHomePageEvent());
            }
          }
        },
        child: BlocBuilder<HomePageBloc, HomePageState>(
          builder: (context, state) {
            if (state is HomePageLoaded) {
              return buildHomePageLoaded(state.homePageData);
            }
            if (state is HomePageLoading) {
              return AppLoading(size: AppValues.loadingWidgetSize);
            }
            if (state is HomePageLoadingError) {
              return AppError(
                bgWidget: AppLoading(size: AppValues.loadingWidgetSize),
                onRetry: () {
                  BlocProvider.of<HomePageBloc>(context).add(
                    LoadHomePageEvent(),
                  );
                },
              );
            }
            return AppLoading(size: AppValues.loadingWidgetSize);
          },
        ),
      );
    });
  }

  SingleChildScrollView buildHomePageLoaded(HomePageData homePageData) {
    ///GROUPS CONCATENATE
    List<Group> autoGroups = [];
    List<Group> adminGroups = [];
    autoGroups.addAll(homePageData.autogeneratedGroups);
    adminGroups.addAll(homePageData.adminGroups);

    return SingleChildScrollView(
      physics: ClampingScrollPhysics(),
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(height: AppMargin.margin_32),

          ///APP BAR
          //HomeAppBar(),
          //SizedBox(height: AppMargin.margin_32),

          ///NO INTERNET HEADER
          NoInternetHeader(),

          ///BUILD RECENTLY PLAYED LIST
          HomeRecentlyPlayed(recentlyPlayed: homePageData.recentlyPlayed),

          ///BUILD HOME CATEGORIES
          HomeCategories(categories: homePageData.categories),
          SizedBox(height: AppMargin.margin_48),

          ///BUILD USER LIBRARY GRIDS
          HomeFeaturedSongs(featuredSongs: homePageData.featuredSongs),

          ///BUILD FEATURED ALBUMS
          HomeFeaturedAlbums(
            featuredAlbums: homePageData.featuredAlbums,
          ),

          ///BUILD FEATURED PLAYLISTS
          HomeFeaturedPlaylists(
            featuredPlaylists: homePageData.featuredPlaylist,
          ),

          ///SONGS WITH VIDEOS
          HomePageVideoCarousel(
            songVideos: homePageData.videoSongs,
          ),

          ///SUBSCRIBE CARD
          AppSubscribeCard(
            topMargin: AppMargin.margin_48,
            bottomMargin: AppMargin.margin_8,
          ),

          ///BUILD HOME PAGE AD
          ItemHomePageAd(appAddEmbedPlace: AppAddEmbedPlace.HOME_PAGE_TOP),

          ///BUILD HOME PAGE AUTO GROUPS
          buildGroupsListView(autoGroups),

          ///BUILD HOME PAGE AD
          ItemHomePageAd(appAddEmbedPlace: AppAddEmbedPlace.HOME_PAGE_MIDDLE),

          ///BUILD HOME PAGE ADMIN GROUPS
          buildGroupsListView(adminGroups),

          ///BUILD HOME PAGE AD
          ItemHomePageAd(appAddEmbedPlace: AppAddEmbedPlace.HOME_PAGE_BOTTOM),
        ],
      ),
    );
  }

  ListView buildGroupsListView(List<Group> groups) {
    return ListView.builder(
      itemCount: groups.length,
      shrinkWrap: true,
      padding: EdgeInsets.zero,
      physics: NeverScrollableScrollPhysics(),
      itemBuilder: (context, index) {
        if (groups[index].groupItems.length > 3 && groups[index].isVisible) {
          return HomeGroups(
            groupId: groups[index].groupId,
            groupTitle:
                L10nUtil.translateLocale(groups[index].groupTitleText, context),
            groupSubTitle: groups[index].groupSubTitleText != null
                ? L10nUtil.translateLocale(
                    groups[index].groupSubTitleText!, context)
                : null,
            groupHeaderImageUrl: groups[index].headerImageId != null
                ? groups[index].headerImageId!.imageMediumPath
                : null,
            groupUiType: groups[index].groupUiType,
            groupItems: groups[index].groupItems,
            groupType: groups[index].groupType,
          );
        } else {
          return SizedBox();
        }
      },
    );
  }
}
